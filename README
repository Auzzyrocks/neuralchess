# NeuralChess 
### Designed and Built by Austin Shouli

## Overview 

NeauralChess is an ongoing personal project to train a neural net to play chess using reinforcement learning on a pseudo random dataset. 

    *Note that this is in active development, and is intended as an educational exploration of machine learning techniques and tools. The focus has not been on efficiency, but rather on agile development to complete a working model in pursuit of learning. Therefore, the code is likely not as robust, efficient or organized as would be expected in a commercial or academic setting.*
    
      This project consists of three main components. Part 1 is mostly functioning and Part 2 and 3 are in the planning/exploration stages:

    1. This data is generated by the board package, which consists of a set of classes defining a chess board, teams, and pieces and the rule set for each. A game of chess is played by the program by picking a random piece from the team's set of pieces, and then a random move from that pieces set of possible moves. The move is then checked by a validator function, and if valid then the piece is moved. If the move is not valid, the program picks another piece/move until a valid one is found. (See future development for effficiency improvements).

        Both teams continue making random moves until one side captures the other's king, ending the game. This is a variant known as Capture The King. This variant was chosen as the checking required to determine if any given move results in a check, or checkmate, is substantial. By requiring a team to capture the other's King, the need to compute possible check scenarios is eliminated. This process results in a pseudo random game of chess being played, to generate a dataset with which to train the model. 

    2. Part 2 consists of a neural net, and the program to train the neural net on a set of random-move chess games generated in part 1. The plan is to use the PyTorch library, and the list of moves made in each game as the inputs. For each game, the total number of moves made is tracked, as well as information in the invalid moves made when selecting the next move. Tracking for the number of pieces loss/captured is being added. This data will be used to scale a win/loss value, so that a game that was won quicker and with less pieces loss will result in a higher 'reward.' 

    3. Part 3 will be to build the functionality into the program to run the trained model in a chess game against a human player, and or itself. Inputs to the model will happen each turn, with the model determining it's next move each turn, or recalculating the set of moves required to win the game, at each turn. 


## Running the program

Running engine.py from the command line will run a random game of chess, outputting each move as a board-diagram and the final results in the command line and in the /data/game.txt file. The game.txt file will be overwritten each time the program is run. 

    Windows: 
    
        $ python3 .\neuralchess\engine.py


## Future Developments 

- Add captured pieces tracking to each team 
- Add castling as a valid move for Kings
- Decide on a dataset format and write a function to output the standardized output
- Build a testing script to run test files of different scenarios  


